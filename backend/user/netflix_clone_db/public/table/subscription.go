//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Subscription = newSubscriptionTable("public", "subscription", "")

type subscriptionTable struct {
	postgres.Table

	// Columns
	SubscriptionID postgres.ColumnInteger
	Name           postgres.ColumnString
	Price          postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SubscriptionTable struct {
	subscriptionTable

	EXCLUDED subscriptionTable
}

// AS creates new SubscriptionTable with assigned alias
func (a SubscriptionTable) AS(alias string) *SubscriptionTable {
	return newSubscriptionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SubscriptionTable with assigned schema name
func (a SubscriptionTable) FromSchema(schemaName string) *SubscriptionTable {
	return newSubscriptionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SubscriptionTable with assigned table prefix
func (a SubscriptionTable) WithPrefix(prefix string) *SubscriptionTable {
	return newSubscriptionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SubscriptionTable with assigned table suffix
func (a SubscriptionTable) WithSuffix(suffix string) *SubscriptionTable {
	return newSubscriptionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSubscriptionTable(schemaName, tableName, alias string) *SubscriptionTable {
	return &SubscriptionTable{
		subscriptionTable: newSubscriptionTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newSubscriptionTableImpl("", "excluded", ""),
	}
}

func newSubscriptionTableImpl(schemaName, tableName, alias string) subscriptionTable {
	var (
		SubscriptionIDColumn = postgres.IntegerColumn("subscription_id")
		NameColumn           = postgres.StringColumn("name")
		PriceColumn          = postgres.FloatColumn("price")
		allColumns           = postgres.ColumnList{SubscriptionIDColumn, NameColumn, PriceColumn}
		mutableColumns       = postgres.ColumnList{NameColumn, PriceColumn}
	)

	return subscriptionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		SubscriptionID: SubscriptionIDColumn,
		Name:           NameColumn,
		Price:          PriceColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
