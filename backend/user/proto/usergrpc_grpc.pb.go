// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: proto/usergrpc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserGRPC_GetUsersByUserIDs_FullMethodName = "/UserGRPC/GetUsersByUserIDs"
)

// UserGRPCClient is the client API for UserGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserGRPCClient interface {
	GetUsersByUserIDs(ctx context.Context, in *GetUsersByUserIDsRequest, opts ...grpc.CallOption) (*GetUsersByUserIDsResponse, error)
}

type userGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewUserGRPCClient(cc grpc.ClientConnInterface) UserGRPCClient {
	return &userGRPCClient{cc}
}

func (c *userGRPCClient) GetUsersByUserIDs(ctx context.Context, in *GetUsersByUserIDsRequest, opts ...grpc.CallOption) (*GetUsersByUserIDsResponse, error) {
	out := new(GetUsersByUserIDsResponse)
	err := c.cc.Invoke(ctx, UserGRPC_GetUsersByUserIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserGRPCServer is the server API for UserGRPC service.
// All implementations must embed UnimplementedUserGRPCServer
// for forward compatibility
type UserGRPCServer interface {
	GetUsersByUserIDs(context.Context, *GetUsersByUserIDsRequest) (*GetUsersByUserIDsResponse, error)
	mustEmbedUnimplementedUserGRPCServer()
}

// UnimplementedUserGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedUserGRPCServer struct {
}

func (UnimplementedUserGRPCServer) GetUsersByUserIDs(context.Context, *GetUsersByUserIDsRequest) (*GetUsersByUserIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByUserIDs not implemented")
}
func (UnimplementedUserGRPCServer) mustEmbedUnimplementedUserGRPCServer() {}

// UnsafeUserGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserGRPCServer will
// result in compilation errors.
type UnsafeUserGRPCServer interface {
	mustEmbedUnimplementedUserGRPCServer()
}

func RegisterUserGRPCServer(s grpc.ServiceRegistrar, srv UserGRPCServer) {
	s.RegisterService(&UserGRPC_ServiceDesc, srv)
}

func _UserGRPC_GetUsersByUserIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersByUserIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGRPCServer).GetUsersByUserIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGRPC_GetUsersByUserIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGRPCServer).GetUsersByUserIDs(ctx, req.(*GetUsersByUserIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserGRPC_ServiceDesc is the grpc.ServiceDesc for UserGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserGRPC",
	HandlerType: (*UserGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsersByUserIDs",
			Handler:    _UserGRPC_GetUsersByUserIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/usergrpc.proto",
}
