// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: proto/episodegrpc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EpisodeGRPC_GetEpisodeByShowIDAndNumber_FullMethodName = "/EpisodeGRPC/GetEpisodeByShowIDAndNumber"
)

// EpisodeGRPCClient is the client API for EpisodeGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EpisodeGRPCClient interface {
	GetEpisodeByShowIDAndNumber(ctx context.Context, in *GetEpisodeByShowIDAndNumberRequest, opts ...grpc.CallOption) (*GetEpisodeByShowIDAndNumberResponse, error)
}

type episodeGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewEpisodeGRPCClient(cc grpc.ClientConnInterface) EpisodeGRPCClient {
	return &episodeGRPCClient{cc}
}

func (c *episodeGRPCClient) GetEpisodeByShowIDAndNumber(ctx context.Context, in *GetEpisodeByShowIDAndNumberRequest, opts ...grpc.CallOption) (*GetEpisodeByShowIDAndNumberResponse, error) {
	out := new(GetEpisodeByShowIDAndNumberResponse)
	err := c.cc.Invoke(ctx, EpisodeGRPC_GetEpisodeByShowIDAndNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EpisodeGRPCServer is the server API for EpisodeGRPC service.
// All implementations must embed UnimplementedEpisodeGRPCServer
// for forward compatibility
type EpisodeGRPCServer interface {
	GetEpisodeByShowIDAndNumber(context.Context, *GetEpisodeByShowIDAndNumberRequest) (*GetEpisodeByShowIDAndNumberResponse, error)
	mustEmbedUnimplementedEpisodeGRPCServer()
}

// UnimplementedEpisodeGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedEpisodeGRPCServer struct {
}

func (UnimplementedEpisodeGRPCServer) GetEpisodeByShowIDAndNumber(context.Context, *GetEpisodeByShowIDAndNumberRequest) (*GetEpisodeByShowIDAndNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpisodeByShowIDAndNumber not implemented")
}
func (UnimplementedEpisodeGRPCServer) mustEmbedUnimplementedEpisodeGRPCServer() {}

// UnsafeEpisodeGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EpisodeGRPCServer will
// result in compilation errors.
type UnsafeEpisodeGRPCServer interface {
	mustEmbedUnimplementedEpisodeGRPCServer()
}

func RegisterEpisodeGRPCServer(s grpc.ServiceRegistrar, srv EpisodeGRPCServer) {
	s.RegisterService(&EpisodeGRPC_ServiceDesc, srv)
}

func _EpisodeGRPC_GetEpisodeByShowIDAndNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEpisodeByShowIDAndNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeGRPCServer).GetEpisodeByShowIDAndNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpisodeGRPC_GetEpisodeByShowIDAndNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeGRPCServer).GetEpisodeByShowIDAndNumber(ctx, req.(*GetEpisodeByShowIDAndNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EpisodeGRPC_ServiceDesc is the grpc.ServiceDesc for EpisodeGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EpisodeGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EpisodeGRPC",
	HandlerType: (*EpisodeGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEpisodeByShowIDAndNumber",
			Handler:    _EpisodeGRPC_GetEpisodeByShowIDAndNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/episodegrpc.proto",
}
