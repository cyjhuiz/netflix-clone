//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Show = newShowTable("public", "show", "")

type showTable struct {
	postgres.Table

	// Columns
	ShowID       postgres.ColumnInteger
	Title        postgres.ColumnString
	Description  postgres.ColumnString
	Duration     postgres.ColumnInteger
	ShowType     postgres.ColumnString
	CategoryID   postgres.ColumnInteger
	ThumbnailURL postgres.ColumnString
	ReleaseDate  postgres.ColumnTimestamp
	UploaderID   postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ShowTable struct {
	showTable

	EXCLUDED showTable
}

// AS creates new ShowTable with assigned alias
func (a ShowTable) AS(alias string) *ShowTable {
	return newShowTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ShowTable with assigned schema name
func (a ShowTable) FromSchema(schemaName string) *ShowTable {
	return newShowTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ShowTable with assigned table prefix
func (a ShowTable) WithPrefix(prefix string) *ShowTable {
	return newShowTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ShowTable with assigned table suffix
func (a ShowTable) WithSuffix(suffix string) *ShowTable {
	return newShowTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newShowTable(schemaName, tableName, alias string) *ShowTable {
	return &ShowTable{
		showTable: newShowTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newShowTableImpl("", "excluded", ""),
	}
}

func newShowTableImpl(schemaName, tableName, alias string) showTable {
	var (
		ShowIDColumn       = postgres.IntegerColumn("show_id")
		TitleColumn        = postgres.StringColumn("title")
		DescriptionColumn  = postgres.StringColumn("description")
		DurationColumn     = postgres.IntegerColumn("duration")
		ShowTypeColumn     = postgres.StringColumn("show_type")
		CategoryIDColumn   = postgres.IntegerColumn("category_id")
		ThumbnailURLColumn = postgres.StringColumn("thumbnail_url")
		ReleaseDateColumn  = postgres.TimestampColumn("release_date")
		UploaderIDColumn   = postgres.IntegerColumn("uploader_id")
		allColumns         = postgres.ColumnList{ShowIDColumn, TitleColumn, DescriptionColumn, DurationColumn, ShowTypeColumn, CategoryIDColumn, ThumbnailURLColumn, ReleaseDateColumn, UploaderIDColumn}
		mutableColumns     = postgres.ColumnList{TitleColumn, DescriptionColumn, DurationColumn, ShowTypeColumn, CategoryIDColumn, ThumbnailURLColumn, ReleaseDateColumn, UploaderIDColumn}
	)

	return showTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ShowID:       ShowIDColumn,
		Title:        TitleColumn,
		Description:  DescriptionColumn,
		Duration:     DurationColumn,
		ShowType:     ShowTypeColumn,
		CategoryID:   CategoryIDColumn,
		ThumbnailURL: ThumbnailURLColumn,
		ReleaseDate:  ReleaseDateColumn,
		UploaderID:   UploaderIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
