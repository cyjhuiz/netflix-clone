//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Like = newLikeTable("public", "like", "")

type likeTable struct {
	postgres.Table

	// Columns
	LikeID postgres.ColumnInteger
	ShowID postgres.ColumnInteger
	UserID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LikeTable struct {
	likeTable

	EXCLUDED likeTable
}

// AS creates new LikeTable with assigned alias
func (a LikeTable) AS(alias string) *LikeTable {
	return newLikeTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LikeTable with assigned schema name
func (a LikeTable) FromSchema(schemaName string) *LikeTable {
	return newLikeTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LikeTable with assigned table prefix
func (a LikeTable) WithPrefix(prefix string) *LikeTable {
	return newLikeTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LikeTable with assigned table suffix
func (a LikeTable) WithSuffix(suffix string) *LikeTable {
	return newLikeTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLikeTable(schemaName, tableName, alias string) *LikeTable {
	return &LikeTable{
		likeTable: newLikeTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newLikeTableImpl("", "excluded", ""),
	}
}

func newLikeTableImpl(schemaName, tableName, alias string) likeTable {
	var (
		LikeIDColumn   = postgres.IntegerColumn("like_id")
		ShowIDColumn   = postgres.IntegerColumn("show_id")
		UserIDColumn   = postgres.IntegerColumn("user_id")
		allColumns     = postgres.ColumnList{LikeIDColumn, ShowIDColumn, UserIDColumn}
		mutableColumns = postgres.ColumnList{ShowIDColumn, UserIDColumn}
	)

	return likeTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		LikeID: LikeIDColumn,
		ShowID: ShowIDColumn,
		UserID: UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
