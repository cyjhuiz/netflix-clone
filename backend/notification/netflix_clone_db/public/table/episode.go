//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Episode = newEpisodeTable("public", "episode", "")

type episodeTable struct {
	postgres.Table

	// Columns
	EpisodeID    postgres.ColumnInteger
	ShowID       postgres.ColumnInteger
	Number       postgres.ColumnInteger
	Title        postgres.ColumnString
	Description  postgres.ColumnString
	VideoURL     postgres.ColumnString
	ThumbnailURL postgres.ColumnString
	ReleaseDate  postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EpisodeTable struct {
	episodeTable

	EXCLUDED episodeTable
}

// AS creates new EpisodeTable with assigned alias
func (a EpisodeTable) AS(alias string) *EpisodeTable {
	return newEpisodeTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EpisodeTable with assigned schema name
func (a EpisodeTable) FromSchema(schemaName string) *EpisodeTable {
	return newEpisodeTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EpisodeTable with assigned table prefix
func (a EpisodeTable) WithPrefix(prefix string) *EpisodeTable {
	return newEpisodeTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EpisodeTable with assigned table suffix
func (a EpisodeTable) WithSuffix(suffix string) *EpisodeTable {
	return newEpisodeTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEpisodeTable(schemaName, tableName, alias string) *EpisodeTable {
	return &EpisodeTable{
		episodeTable: newEpisodeTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newEpisodeTableImpl("", "excluded", ""),
	}
}

func newEpisodeTableImpl(schemaName, tableName, alias string) episodeTable {
	var (
		EpisodeIDColumn    = postgres.IntegerColumn("episode_id")
		ShowIDColumn       = postgres.IntegerColumn("show_id")
		NumberColumn       = postgres.IntegerColumn("number")
		TitleColumn        = postgres.StringColumn("title")
		DescriptionColumn  = postgres.StringColumn("description")
		VideoURLColumn     = postgres.StringColumn("video_url")
		ThumbnailURLColumn = postgres.StringColumn("thumbnail_url")
		ReleaseDateColumn  = postgres.TimestampColumn("release_date")
		allColumns         = postgres.ColumnList{EpisodeIDColumn, ShowIDColumn, NumberColumn, TitleColumn, DescriptionColumn, VideoURLColumn, ThumbnailURLColumn, ReleaseDateColumn}
		mutableColumns     = postgres.ColumnList{ShowIDColumn, NumberColumn, TitleColumn, DescriptionColumn, VideoURLColumn, ThumbnailURLColumn, ReleaseDateColumn}
	)

	return episodeTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		EpisodeID:    EpisodeIDColumn,
		ShowID:       ShowIDColumn,
		Number:       NumberColumn,
		Title:        TitleColumn,
		Description:  DescriptionColumn,
		VideoURL:     VideoURLColumn,
		ThumbnailURL: ThumbnailURLColumn,
		ReleaseDate:  ReleaseDateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
